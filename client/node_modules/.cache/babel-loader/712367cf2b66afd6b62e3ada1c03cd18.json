{"ast":null,"code":"import _classCallCheck from \"/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\n\nvar LoginController =\n/*#__PURE__*/\nfunction () {\n  function LoginController() {\n    _classCallCheck(this, LoginController);\n\n    this.userChangedListeners = [];\n    this.user = null;\n  }\n\n  _createClass(LoginController, [{\n    key: \"login\",\n    value: function login(username, password, afterLoginCallback) {\n      var _this = this;\n\n      var postData = {\n        username: username,\n        password: password\n      };\n      axios.post(\"/api/user/login\", postData).then(function (response) {\n        // Got here, we should have a cookie set and can go forward\n        console.log(\"User logged in\");\n        var user = response.data.user;\n\n        _this.setUser(user);\n\n        afterLoginCallback && afterLoginCallback(null, user);\n      }).catch(function (err) {\n        console.log(err); // The error might have come from the server, or thrown by the client\n\n        var errorMessage = err.response && err.response.data.error || \"Unable to login\";\n        afterLoginCallback(errorMessage, null);\n      });\n    } // Hit our API and validate our authentication information\n\n  }, {\n    key: \"recheckLogin\",\n    value: function recheckLogin(loginCallback) {\n      var _this2 = this;\n\n      axios.get(\"/api/user/getUser\").then(function (response) {\n        var user = response.data.user || null;\n\n        _this2.setUser(user);\n\n        loginCallback && loginCallback(user);\n      });\n    }\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this.user = user; // Go through all the listeners and notify them\n\n      this.userChangedListeners.forEach(function (listener) {\n        return listener(user);\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(afterLogoutCallback) {\n      var _this3 = this;\n\n      axios.post(\"/api/user/logout\").then(function (response) {\n        _this3.setUser(null);\n\n        afterLogoutCallback && afterLogoutCallback();\n      });\n    }\n  }, {\n    key: \"addUserChangedListener\",\n    value: function addUserChangedListener(listenerCallback) {\n      this.userChangedListeners.push(listenerCallback);\n    }\n  }, {\n    key: \"removeUserChangedListener\",\n    value: function removeUserChangedListener(listenerCallback) {\n      this.userChangedListeners = this.userChangedListeners.filter(function (l) {\n        return l !== listenerCallback;\n      });\n    }\n  }]);\n\n  return LoginController;\n}();\n\nexport default new LoginController();","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/controllers/LoginController.js"],"names":["axios","LoginController","userChangedListeners","user","username","password","afterLoginCallback","postData","post","then","response","console","log","data","setUser","catch","err","errorMessage","error","loginCallback","get","forEach","listener","afterLogoutCallback","listenerCallback","push","filter","l"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,e;;;;;;SAEJC,oB,GAAuB,E;SAEvBC,I,GAAO,I;;;;;0BAEDC,Q,EAAUC,Q,EAAUC,kB,EAAoB;AAAA;;AAC5C,UAAMC,QAAQ,GAAG;AAAEH,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,QAAAA,QAAQ,EAAEA;AAAhC,OAAjB;AAEAL,MAAAA,KAAK,CAACQ,IAAN,CAAW,iBAAX,EAA8BD,QAA9B,EACGE,IADH,CACQ,UAAAC,QAAQ,EAAI;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA,YAAIT,IAAI,GAAGO,QAAQ,CAACG,IAAT,CAAcV,IAAzB;;AACA,QAAA,KAAI,CAACW,OAAL,CAAaX,IAAb;;AAEAG,QAAAA,kBAAkB,IAAIA,kBAAkB,CAAC,IAAD,EAAOH,IAAP,CAAxC;AACD,OATL,EAUGY,KAVH,CAUS,UAAAC,GAAG,EAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EADY,CAEZ;;AACA,YAAIC,YAAY,GAAID,GAAG,CAACN,QAAJ,IAAgBM,GAAG,CAACN,QAAJ,CAAaG,IAAb,CAAkBK,KAAnC,IAA6C,iBAAhE;AAEAZ,QAAAA,kBAAkB,CAACW,YAAD,EAAe,IAAf,CAAlB;AACD,OAhBH;AAiBD,K,CAED;;;;iCACaE,a,EAAe;AAAA;;AAC1BnB,MAAAA,KAAK,CAACoB,GAAN,CAAU,mBAAV,EAA+BX,IAA/B,CAAoC,UAAAC,QAAQ,EAAI;AAC9C,YAAIP,IAAI,GAAGO,QAAQ,CAACG,IAAT,CAAcV,IAAd,IAAsB,IAAjC;;AAEA,QAAA,MAAI,CAACW,OAAL,CAAaX,IAAb;;AAEAgB,QAAAA,aAAa,IAAIA,aAAa,CAAChB,IAAD,CAA9B;AACD,OAND;AAOD;;;4BAEOA,I,EAAM;AACZ,WAAKA,IAAL,GAAYA,IAAZ,CADY,CAGZ;;AACA,WAAKD,oBAAL,CAA0BmB,OAA1B,CAAkC,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACnB,IAAD,CAAZ;AAAA,OAA1C;AACD;;;2BAEMoB,mB,EAAqB;AAAA;;AAC1BvB,MAAAA,KAAK,CAACQ,IAAN,CAAW,kBAAX,EAA+BC,IAA/B,CAAoC,UAAAC,QAAQ,EAAI;AAC9C,QAAA,MAAI,CAACI,OAAL,CAAa,IAAb;;AAEAS,QAAAA,mBAAmB,IAAIA,mBAAmB,EAA1C;AACD,OAJD;AAKD;;;2CAEsBC,gB,EAAkB;AACvC,WAAKtB,oBAAL,CAA0BuB,IAA1B,CAA+BD,gBAA/B;AACD;;;8CAEyBA,gB,EAAkB;AAC1C,WAAKtB,oBAAL,GACE,KAAKA,oBAAL,CAA0BwB,MAA1B,CAAiC,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKH,gBAAV;AAAA,OAAlC,CADF;AAED;;;;;;AAGH,eAAe,IAAIvB,eAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass LoginController {\n  // This is a list of callbacks that are remembered for when the user changes. (login/logout)\n  userChangedListeners = [];\n\n  user = null;\n\n  login(username, password, afterLoginCallback) {\n    const postData = { username: username, password: password };\n\n    axios.post(\"/api/user/login\", postData)\n      .then(response => {\n          // Got here, we should have a cookie set and can go forward\n          console.log(\"User logged in\");\n          \n          let user = response.data.user;\n          this.setUser(user);\n          \n          afterLoginCallback && afterLoginCallback(null, user);\n        })\n      .catch(err => {\n        console.log(err);\n        // The error might have come from the server, or thrown by the client\n        let errorMessage = (err.response && err.response.data.error) || \"Unable to login\";\n\n        afterLoginCallback(errorMessage, null);\n      })\n  }\n\n  // Hit our API and validate our authentication information\n  recheckLogin(loginCallback) {\n    axios.get(\"/api/user/getUser\").then(response => {\n      let user = response.data.user || null;\n\n      this.setUser(user);\n\n      loginCallback && loginCallback(user);\n    })\n  }\n\n  setUser(user) {\n    this.user = user;\n\n    // Go through all the listeners and notify them\n    this.userChangedListeners.forEach(listener => listener(user));\n  }\n\n  logout(afterLogoutCallback) {\n    axios.post(\"/api/user/logout\").then(response => {\n      this.setUser(null);\n\n      afterLogoutCallback && afterLogoutCallback();\n    })\n  }\n\n  addUserChangedListener(listenerCallback) {\n    this.userChangedListeners.push(listenerCallback);\n  }\n\n  removeUserChangedListener(listenerCallback) {\n    this.userChangedListeners = \n      this.userChangedListeners.filter(l => l !== listenerCallback);\n  }\n}\n\nexport default new LoginController();"]},"metadata":{},"sourceType":"module"}