{"ast":null,"code":"var _jsxFileName = \"/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/components/ScrollTabSentence/SimpleTable/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 2,\n      overflowX: 'auto'\n    },\n    table: {\n      minWidth: 500\n    }\n  };\n};\n\nfunction SimpleTable(props) {\n  var classes = props.classes,\n      found_sentences = props.found_sentences,\n      word = props.word; /// input data and word and returs array with the sentences connected to that word\n\n  function create_table_data(data, word_required) {\n    var sentences = [];\n    var result = data.filter(function (word) {\n      return word.word == word_required;\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      sentences.push(result[i].sentence);\n    }\n\n    return sentences;\n  }\n\n  var sentences_in_table = create_table_data(found_sentences, word);\n  console.log(\"SENTENCES IN TABLE\", sentences_in_table);\n  return React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, sentences_in_table.map(function (row) {\n    return React.createElement(TableRow, {\n      key: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, row));\n  }))));\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SimpleTable); // {rows.map(row => (\n//   <TableRow key={row.id}>\n//     <TableCell component=\"th\" scope=\"row\">\n//       {row.name} \n//     </TableCell>\n//   </TableRow>\n// ))}","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/components/ScrollTabSentence/SimpleTable/index.js"],"names":["React","PropTypes","withStyles","Table","TableBody","TableCell","TableRow","Paper","styles","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth","SimpleTable","props","classes","found_sentences","word","create_table_data","data","word_required","sentences","result","filter","i","length","push","sentence","sentences_in_table","console","log","map","row","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACvBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,MADH;AAEJC,MAAAA,SAAS,EAAEH,KAAK,CAACI,OAAN,CAAcC,IAAd,GAAqB,CAF5B;AAGJC,MAAAA,SAAS,EAAE;AAHP,KADiB;AAMvBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL;AANgB,GAAL;AAAA,CAApB;;AAYA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAClBC,OADkB,GACkBD,KADlB,CAClBC,OADkB;AAAA,MACRC,eADQ,GACkBF,KADlB,CACRE,eADQ;AAAA,MACUC,IADV,GACkBH,KADlB,CACUG,IADV,EAI1B;;AACF,WAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,aAAjC,EAA+C;AAE7C,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAN,IAAI;AAAA,aAAIA,IAAI,CAACA,IAAL,IAAaG,aAAjB;AAAA,KAAhB,CAAf;;AAEA,SAAI,IAAII,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,MAAM,CAACG,MAArB,EAA4BD,CAAC,EAA7B,EAAgC;AAC9BH,MAAAA,SAAS,CAACK,IAAV,CAAeJ,MAAM,CAACE,CAAD,CAAN,CAAUG,QAAzB;AACD;;AAED,WAAON,SAAP;AACD;;AAGD,MAAIO,kBAAkB,GAAGV,iBAAiB,CAACF,eAAD,EAAiBC,IAAjB,CAA1C;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,kBAAlC;AAEE,SACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEb,OAAO,CAACV,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEU,OAAO,CAACJ,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,kBAAkB,CAACG,GAAnB,CAAuB,UAAAC,GAAG;AAAA,WACzB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,IAArB;AAA0B,MAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,GADH,CADF,CADyB;AAAA,GAA1B,CADH,CAFF,CADF,CADF;AAgBD;;AAEDnB,WAAW,CAACoB,SAAZ,GAAwB;AACtBlB,EAAAA,OAAO,EAAEnB,SAAS,CAACsC,MAAV,CAAiBC;AADJ,CAAxB;AAIA,eAAetC,UAAU,CAACM,MAAD,CAAV,CAAmBU,WAAnB,CAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 2,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 500,\n  },\n});\n\n\nfunction SimpleTable(props) {\n  const { classes , found_sentences , word} = props;\n\n  \n  /// input data and word and returs array with the sentences connected to that word\nfunction create_table_data(data, word_required){\n\n  let sentences = [];\n  const result = data.filter(word => word.word == word_required);\n\n  for(let i=0;i<result.length;i++){\n    sentences.push(result[i].sentence)\n  }\n\n  return sentences\n}\n\n\nlet sentences_in_table = create_table_data(found_sentences,word); \n\nconsole.log(\"SENTENCES IN TABLE\", sentences_in_table);\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        \n        <TableBody>\n          {sentences_in_table.map(row => (\n            <TableRow key={row}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row} \n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleTable);\n\n\n// {rows.map(row => (\n//   <TableRow key={row.id}>\n//     <TableCell component=\"th\" scope=\"row\">\n//       {row.name} \n//     </TableCell>\n//   </TableRow>\n// ))}"]},"metadata":{},"sourceType":"module"}