{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _raf = _interopRequireDefault(require(\"raf\"));\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Transition, _React$Component);\n\n  function Transition(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Transition);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Transition).call(this, props));\n    _this.didEnter = _this.didEnter.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.didLeave = _this.didLeave.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.state = {\n      children: props.children && _this.enhanceChildren(props.children)\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(Transition, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var children = _react.default.isValidElement(this.props.children) && _react.default.Children.only(this.props.children);\n\n      var nextChildren = _react.default.isValidElement(nextProps.children) && _react.default.Children.only(nextProps.children);\n\n      if (!nextProps.name) {\n        this.setState({\n          children: nextChildren\n        });\n        return;\n      }\n\n      if (this.isViewComponent(nextChildren)) {\n        this.setState({\n          children: this.enhanceChildren(nextChildren, {\n            show: children ? children.props.show : true\n          })\n        });\n      } else {\n        if (nextChildren) {\n          this.setState({\n            children: this.enhanceChildren(nextChildren)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(preProps) {\n      if (!this.props.name) return;\n\n      var children = _react.default.isValidElement(this.props.children) && _react.default.Children.only(this.props.children);\n\n      var preChildren = _react.default.isValidElement(preProps.children) && _react.default.Children.only(preProps.children);\n\n      if (this.isViewComponent(children)) {\n        if ((!preChildren || !preChildren.props.show) && children.props.show) {\n          this.toggleVisible();\n        } else if (preChildren && preChildren.props.show && !children.props.show) {\n          this.toggleHidden();\n        }\n      } else {\n        if (!preChildren && children) {\n          this.toggleVisible();\n        } else if (preChildren && !children) {\n          this.toggleHidden();\n        }\n      }\n    }\n  }, {\n    key: \"enhanceChildren\",\n    value: function enhanceChildren(children, props) {\n      var _this2 = this;\n\n      return _react.default.cloneElement(children, Object.assign({\n        ref: function ref(el) {\n          _this2.el = el;\n        }\n      }, props));\n    }\n  }, {\n    key: \"isViewComponent\",\n    value: function isViewComponent(element) {\n      return element && element.type._typeName === 'View';\n    }\n    /* css animation fix when animation applyied to .{action} instanceof .{action}-active */\n\n  }, {\n    key: \"animateElement\",\n    value: function animateElement(element, action, active, fn) {\n      element.classList.add(active);\n      var styles = getComputedStyle(element);\n      var duration = parseFloat(styles['animationDuration']) || parseFloat(styles['transitionDuration']);\n      element.classList.add(action);\n\n      if (duration === 0) {\n        var _styles = getComputedStyle(element);\n\n        var _duration = parseFloat(_styles['animationDuration']) || parseFloat(_styles['transitionDuration']);\n\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(function () {\n          fn();\n        }, _duration * 1000);\n      }\n\n      element.classList.remove(action, active);\n    }\n  }, {\n    key: \"didEnter\",\n    value: function didEnter(e) {\n      var childDOM = _reactDom.default.findDOMNode(this.el);\n\n      if (!e || e.target !== childDOM) return;\n      var onAfterEnter = this.props.onAfterEnter;\n      var _this$transitionClass = this.transitionClass,\n          enterActive = _this$transitionClass.enterActive,\n          enterTo = _this$transitionClass.enterTo;\n      childDOM.classList.remove(enterActive, enterTo);\n      childDOM.removeEventListener('transitionend', this.didEnter);\n      childDOM.removeEventListener('animationend', this.didEnter);\n      onAfterEnter && onAfterEnter();\n    }\n  }, {\n    key: \"didLeave\",\n    value: function didLeave(e) {\n      var _this3 = this;\n\n      var childDOM = _reactDom.default.findDOMNode(this.el);\n\n      if (!e || e.target !== childDOM) return;\n      var _this$props = this.props,\n          onAfterLeave = _this$props.onAfterLeave,\n          children = _this$props.children;\n      var _this$transitionClass2 = this.transitionClass,\n          leaveActive = _this$transitionClass2.leaveActive,\n          leaveTo = _this$transitionClass2.leaveTo;\n      new Promise(function (resolve) {\n        if (_this3.isViewComponent(children)) {\n          childDOM.removeEventListener('transitionend', _this3.didLeave);\n          childDOM.removeEventListener('animationend', _this3.didLeave);\n          (0, _raf.default)(function () {\n            childDOM.style.display = 'none';\n            childDOM.classList.remove(leaveActive, leaveTo);\n            (0, _raf.default)(resolve);\n          });\n        } else {\n          _this3.setState({\n            children: null\n          }, resolve);\n        }\n      }).then(function () {\n        onAfterLeave && onAfterLeave();\n      });\n    }\n  }, {\n    key: \"toggleVisible\",\n    value: function toggleVisible() {\n      var _this4 = this;\n\n      var onEnter = this.props.onEnter;\n      var _this$transitionClass3 = this.transitionClass,\n          enter = _this$transitionClass3.enter,\n          enterActive = _this$transitionClass3.enterActive,\n          enterTo = _this$transitionClass3.enterTo,\n          leaveActive = _this$transitionClass3.leaveActive,\n          leaveTo = _this$transitionClass3.leaveTo;\n\n      var childDOM = _reactDom.default.findDOMNode(this.el);\n\n      childDOM.addEventListener('transitionend', this.didEnter);\n      childDOM.addEventListener('animationend', this.didEnter); // this.animateElement(childDOM, enter, enterActive, this.didEnter);\n\n      (0, _raf.default)(function () {\n        // when hidden transition not end\n        if (childDOM.classList.contains(leaveActive)) {\n          childDOM.classList.remove(leaveActive, leaveTo);\n          childDOM.removeEventListener('transitionend', _this4.didLeave);\n          childDOM.removeEventListener('animationend', _this4.didLeave);\n        }\n\n        childDOM.style.display = '';\n        childDOM.classList.add(enter, enterActive);\n        onEnter && onEnter();\n        (0, _raf.default)(function () {\n          childDOM.classList.remove(enter);\n          childDOM.classList.add(enterTo);\n        });\n      });\n    }\n  }, {\n    key: \"toggleHidden\",\n    value: function toggleHidden() {\n      var _this5 = this;\n\n      var onLeave = this.props.onLeave;\n      var _this$transitionClass4 = this.transitionClass,\n          leave = _this$transitionClass4.leave,\n          leaveActive = _this$transitionClass4.leaveActive,\n          leaveTo = _this$transitionClass4.leaveTo,\n          enterActive = _this$transitionClass4.enterActive,\n          enterTo = _this$transitionClass4.enterTo;\n\n      var childDOM = _reactDom.default.findDOMNode(this.el);\n\n      childDOM.addEventListener('transitionend', this.didLeave);\n      childDOM.addEventListener('animationend', this.didLeave); // this.animateElement(childDOM, leave, leaveActive, this.didLeave);\n\n      (0, _raf.default)(function () {\n        // when enter transition not end\n        if (childDOM.classList.contains(enterActive)) {\n          childDOM.classList.remove(enterActive, enterTo);\n          childDOM.removeEventListener('transitionend', _this5.didEnter);\n          childDOM.removeEventListener('animationend', _this5.didEnter);\n        }\n\n        childDOM.classList.add(leave, leaveActive);\n        onLeave && onLeave();\n        (0, _raf.default)(function () {\n          childDOM.classList.remove(leave);\n          childDOM.classList.add(leaveTo);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.children || null;\n    }\n  }, {\n    key: \"transitionClass\",\n    get: function get() {\n      var name = this.props.name;\n      return {\n        enter: \"\".concat(name, \"-enter\"),\n        enterActive: \"\".concat(name, \"-enter-active\"),\n        enterTo: \"\".concat(name, \"-enter-to\"),\n        leave: \"\".concat(name, \"-leave\"),\n        leaveActive: \"\".concat(name, \"-leave-active\"),\n        leaveTo: \"\".concat(name, \"-leave-to\")\n      };\n    }\n  }]);\n  return Transition;\n}(_react.default.Component);\n\nvar _default = Transition;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}