{"ast":null,"code":"module.exports = {\n  wordMap: function wordMap(text) {\n    //This function received a text string and returns \n    // one object of word:times_repeated pairs for all words\n    // and one vector in the order ot repetition from high to low\n    console.log('This is wordmap !!!*****');\n    var textArray = text.split(\" \");\n    var wordContainer = [];\n    var keysSorted = null;\n\n    for (var i = 0; i < textArray.length; i++) {\n      wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0) + 1; //use key value pairs \n    }\n\n    keysSorted = Object.keys(wordContainer).sort(function (a, b) {\n      return wordContainer[b] - wordContainer[a];\n    });\n    this.createWordMapData(wordContainer, keysSorted);\n  }\n};","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/Algorithms/wordmap.js"],"names":["module","exports","wordMap","text","console","log","textArray","split","wordContainer","keysSorted","i","length","Object","keys","sort","a","b","createWordMapData"],"mappings":"AAEAA,MAAM,CAACC,OAAP,GAAiB;AAKbC,EAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgB;AACrB;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAIC,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAhB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,SAAS,CAACK,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AACpCF,MAAAA,aAAa,CAACF,SAAS,CAACI,CAAD,CAAV,CAAb,GAA8B,CAACF,aAAa,CAACF,SAAS,CAACI,CAAD,CAAV,CAAb,IAA+B,CAAhC,IAAsC,CAApE,CADoC,CACmC;AACtE;;AAEDD,IAAAA,UAAU,GAAGG,MAAM,CAACC,IAAP,CAAYL,aAAZ,EAA2BM,IAA3B,CAAgC,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,aAAOR,aAAa,CAACQ,CAAD,CAAb,GAAiBR,aAAa,CAACO,CAAD,CAArC;AAAyC,KAAvF,CAAb;AAEA,SAAKE,iBAAL,CAAuBT,aAAvB,EAAqCC,UAArC;AACH;AArBY,CAAjB","sourcesContent":["\n\nmodule.exports = {\n\n\n    \n\n    wordMap: function (text) {\n        //This function received a text string and returns \n        // one object of word:times_repeated pairs for all words\n        // and one vector in the order ot repetition from high to low\n        console.log('This is wordmap !!!*****')\n        let textArray = text.split(\" \");\n        let wordContainer = [];\n        let keysSorted = null;\n        \n        for(let i=0; i<textArray.length;i++){\n        wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0 ) + 1; //use key value pairs \n        }\n        \n        keysSorted = Object.keys(wordContainer).sort(function(a,b){return wordContainer[b]-wordContainer[a]});\n        \n        this.createWordMapData(wordContainer,keysSorted);\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}