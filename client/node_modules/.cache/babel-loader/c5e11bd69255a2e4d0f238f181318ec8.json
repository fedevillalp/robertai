{"ast":null,"code":"module.exports = {\n  createWordMapData: function createWordMapData(wordListandNumbers, wordsSorted) {\n    //this function formats the most repeated words\n    //in data format ready to plot\n    var data = [];\n\n    for (var i = 0; i < wordsSorted.length; i++) {\n      if (wordsSorted[i] != \"\") {\n        data.push({\n          name: wordsSorted[i],\n          repeated: wordListandNumbers[wordsSorted[i]]\n        });\n      }\n    }\n\n    return data; //Update state to refresh chart\n    // this.setState({\n    // wordMapData: data\n    // });\n\n    console.log('wordmapdata:', data);\n  },\n  wordMap: function wordMap(text) {\n    //This function received a text string and returns \n    // one object of word:times_repeated pairs for all words\n    // and one vector in the order ot repetition from high to low\n    console.log('This is wordmap !!!*****');\n    var textArray = text.split(\" \");\n    var wordContainer = [];\n    var keysSorted = null;\n\n    for (var i = 0; i < textArray.length; i++) {\n      wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0) + 1; //use key value pairs \n    }\n\n    keysSorted = Object.keys(wordContainer).sort(function (a, b) {\n      return wordContainer[b] - wordContainer[a];\n    });\n    this.createWordMapData(wordContainer, keysSorted);\n  }\n};","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/Algorithms/wordmap.js"],"names":["module","exports","createWordMapData","wordListandNumbers","wordsSorted","data","i","length","push","name","repeated","console","log","wordMap","text","textArray","split","wordContainer","keysSorted","Object","keys","sort","a","b"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAGbC,EAAAA,iBAAiB,EAAE,2BAAUC,kBAAV,EAA6BC,WAA7B,EAA0C;AACzD;AACA;AAEA,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAGF,WAAW,CAACE,CAAD,CAAX,IAAgB,EAAnB,EAAsB;AACtBD,QAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,UAAAA,IAAI,EAAEL,WAAW,CAACE,CAAD,CADX;AACgBI,UAAAA,QAAQ,EAAEP,kBAAkB,CAACC,WAAW,CAACE,CAAD,CAAZ;AAD5C,SAAV;AAGC;AACJ;;AAED,WAAOD,IAAP,CAdyD,CAezD;AACA;AACA;AACA;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BP,IAA3B;AAEH,GAxBY;AA0BbQ,EAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgB;AACrB;AACA;AACA;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAIG,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAhB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,SAAI,IAAIZ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACS,SAAS,CAACR,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AACpCW,MAAAA,aAAa,CAACF,SAAS,CAACT,CAAD,CAAV,CAAb,GAA8B,CAACW,aAAa,CAACF,SAAS,CAACT,CAAD,CAAV,CAAb,IAA+B,CAAhC,IAAsC,CAApE,CADoC,CACmC;AACtE;;AAEDY,IAAAA,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,IAA3B,CAAgC,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,aAAON,aAAa,CAACM,CAAD,CAAb,GAAiBN,aAAa,CAACK,CAAD,CAArC;AAAyC,KAAvF,CAAb;AAEA,SAAKpB,iBAAL,CAAuBe,aAAvB,EAAqCC,UAArC;AACH;AA1CY,CAAjB","sourcesContent":["module.exports = {\n\n\n    createWordMapData: function (wordListandNumbers,wordsSorted) {\n        //this function formats the most repeated words\n        //in data format ready to plot\n    \n        let data = [];\n    \n        for (let i = 0; i < wordsSorted.length; i++) {\n            if(wordsSorted[i]!=\"\"){\n            data.push({\n                name: wordsSorted[i], repeated: wordListandNumbers[wordsSorted[i]]\n            })\n            }\n        }\n    \n        return data;\n        //Update state to refresh chart\n        // this.setState({\n        // wordMapData: data\n        // });\n        console.log('wordmapdata:',data);\n    \n    },\n\n    wordMap: function (text) {\n        //This function received a text string and returns \n        // one object of word:times_repeated pairs for all words\n        // and one vector in the order ot repetition from high to low\n        console.log('This is wordmap !!!*****')\n        let textArray = text.split(\" \");\n        let wordContainer = [];\n        let keysSorted = null;\n        \n        for(let i=0; i<textArray.length;i++){\n        wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0 ) + 1; //use key value pairs \n        }\n        \n        keysSorted = Object.keys(wordContainer).sort(function(a,b){return wordContainer[b]-wordContainer[a]});\n        \n        this.createWordMapData(wordContainer,keysSorted);\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}