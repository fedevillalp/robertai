{"ast":null,"code":"var createWordMapData = function createWordMapData(wordListandNumbers, wordsSorted, number_of_words_to_plot) {\n  //this function formats the most repeated words\n  //in data format ready to plot\n  var data = [];\n\n  for (var i = 0; i < number_of_words_to_plot; i++) {\n    if (wordsSorted[i] != \"\") {\n      data.push({\n        name: wordsSorted[i],\n        repeated: wordListandNumbers[wordsSorted[i]]\n      });\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  wordMap: function wordMap(text, number_of_words_to_plot) {\n    //This function received a text string and  a number and returns \n    // one object of word:times_repeated pairs for all words\n    // and one vector in the order ot repetition from high to low\n    var textArray = text.split(\" \");\n    var wordContainer = [];\n    var keysSorted = null;\n\n    for (var i = 0; i < textArray.length; i++) {\n      wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0) + 1; //use key value pairs \n    }\n\n    keysSorted = Object.keys(wordContainer).sort(function (a, b) {\n      return wordContainer[b] - wordContainer[a];\n    });\n    var data = createWordMapData(wordContainer, keysSorted, number_of_words_to_plot);\n    return {\n      data: data,\n      keysSorted: keysSorted\n    };\n  }\n};","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/Algorithms/wordmap.js"],"names":["createWordMapData","wordListandNumbers","wordsSorted","number_of_words_to_plot","data","i","push","name","repeated","module","exports","wordMap","text","textArray","split","wordContainer","keysSorted","length","Object","keys","sort","a","b"],"mappings":"AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,kBAAV,EAA6BC,WAA7B,EAAyCC,uBAAzC,EAAkE;AACxF;AACA;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,uBAApB,EAA6CE,CAAC,EAA9C,EAAkD;AAC9C,QAAGH,WAAW,CAACG,CAAD,CAAX,IAAgB,EAAnB,EAAsB;AACtBD,MAAAA,IAAI,CAACE,IAAL,CAAU;AACNC,QAAAA,IAAI,EAAEL,WAAW,CAACG,CAAD,CADX;AACgBG,QAAAA,QAAQ,EAAEP,kBAAkB,CAACC,WAAW,CAACG,CAAD,CAAZ;AAD5C,OAAV;AAGC;AACJ;;AAED,SAAOD,IAAP;AAEH,CAfD;;AAiBAK,MAAM,CAACC,OAAP,GAAiB;AAEbC,EAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAeT,uBAAf,EAAwC;AAC7C;AACA;AACA;AAEA,QAAIU,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAhB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,SAAI,IAAIX,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACQ,SAAS,CAACI,MAAzB,EAAgCZ,CAAC,EAAjC,EAAoC;AACpCU,MAAAA,aAAa,CAACF,SAAS,CAACR,CAAD,CAAV,CAAb,GAA8B,CAACU,aAAa,CAACF,SAAS,CAACR,CAAD,CAAV,CAAb,IAA+B,CAAhC,IAAsC,CAApE,CADoC,CACmC;AACtE;;AAEDW,IAAAA,UAAU,GAAGE,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BK,IAA3B,CAAgC,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,aAAOP,aAAa,CAACO,CAAD,CAAb,GAAiBP,aAAa,CAACM,CAAD,CAArC;AAAyC,KAAvF,CAAb;AAEA,QAAIjB,IAAI,GAAGJ,iBAAiB,CAACe,aAAD,EAAeC,UAAf,EAA0Bb,uBAA1B,CAA5B;AACA,WAAO;AAACC,MAAAA,IAAI,EAAJA,IAAD;AAAOY,MAAAA,UAAU,EAAVA;AAAP,KAAP;AACH;AAnBY,CAAjB","sourcesContent":["const createWordMapData = function (wordListandNumbers,wordsSorted,number_of_words_to_plot) {\n    //this function formats the most repeated words\n    //in data format ready to plot\n    let data = [];\n\n    for (let i = 0; i < number_of_words_to_plot; i++) {\n        if(wordsSorted[i]!=\"\"){\n        data.push({\n            name: wordsSorted[i], repeated: wordListandNumbers[wordsSorted[i]]\n        })\n        }\n    }\n    \n    return data;\n    \n}\n\nmodule.exports = {\n\n    wordMap: function (text,number_of_words_to_plot) {\n        //This function received a text string and  a number and returns \n        // one object of word:times_repeated pairs for all words\n        // and one vector in the order ot repetition from high to low\n\n        let textArray = text.split(\" \");\n        let wordContainer = [];\n        let keysSorted = null;\n        \n        for(let i=0; i<textArray.length;i++){\n        wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0 ) + 1; //use key value pairs \n        }\n        \n        keysSorted = Object.keys(wordContainer).sort(function(a,b){return wordContainer[b]-wordContainer[a]});\n        \n        let data = createWordMapData(wordContainer,keysSorted,number_of_words_to_plot);\n        return {data, keysSorted};\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}