{"ast":null,"code":"module.exports = {\n  sentenceFinder: function sentenceFinder(text, words) {\n    //This function receives a text string (transcript) and word array and returns \n    //an object with the word:sentence pairs found in the transctipt for all words\n    var word_array = words.trim().split(\" \");\n    var allSentences = text.trim().split(\".\");\n    var foundSentences = []; //console.log(word_array, allSentences)\n\n    for (var i = 0; i < allSentences.length; i++) {\n      for (var j = 0; j < word_array.length; j++) {\n        if (allSentences[i].includes(word_array[j])) {\n          //console.log('Found \"', word_array[j], '\" in: ', allSentences[i]);\n          foundSentences.push({\n            word: word_array[j],\n            sentence: allSentences[i]\n          });\n        }\n      }\n    } //return ([foundSentences, allSentences.length-1]);\n\n\n    return foundSentences;\n  }\n};","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/Algorithms/sentencefinder.js"],"names":["module","exports","sentenceFinder","text","words","word_array","trim","split","allSentences","foundSentences","i","length","j","includes","push","word","sentence"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAEbC,EAAAA,cAAc,EAAE,wBAAUC,IAAV,EAAgBC,KAAhB,EAAsB;AAClC;AACA;AACA,QAAIC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,KAAb,CAAmB,GAAnB,CAAjB;AACA,QAAIC,YAAY,GAAGL,IAAI,CAACG,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAAnB;AACA,QAAIE,cAAc,GAAG,EAArB,CALkC,CAMlC;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,YAAY,CAACG,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,UAAU,CAACM,MAA1B,EAAiCC,CAAC,EAAlC,EAAqC;AACjC,YAAGJ,YAAY,CAACE,CAAD,CAAZ,CAAgBG,QAAhB,CAAyBR,UAAU,CAACO,CAAD,CAAnC,CAAH,EAA2C;AACvC;AACAH,UAAAA,cAAc,CAACK,IAAf,CAAoB;AAACC,YAAAA,IAAI,EAAEV,UAAU,CAACO,CAAD,CAAjB;AAAsBI,YAAAA,QAAQ,EAAER,YAAY,CAACE,CAAD;AAA5C,WAApB;AACH;AACJ;AACJ,KAfiC,CAkBlC;;;AACA,WAAQD,cAAR;AACH;AAtBY,CAAjB","sourcesContent":["module.exports = {\n\n    sentenceFinder: function (text, words){\n        //This function receives a text string (transcript) and word array and returns \n        //an object with the word:sentence pairs found in the transctipt for all words\n        let word_array = words.trim().split(\" \");\n        let allSentences = text.trim().split(\".\");\n        let foundSentences = [];\n        //console.log(word_array, allSentences)\n        \n        for(let i=0;i<allSentences.length;i++){\n            for(let j=0; j<word_array.length;j++){\n                if(allSentences[i].includes(word_array[j])){\n                    //console.log('Found \"', word_array[j], '\" in: ', allSentences[i]);\n                    foundSentences.push({word: word_array[j], sentence: allSentences[i]});\n                }\n            }\n        }\n\n\n        //return ([foundSentences, allSentences.length-1]);\n        return (foundSentences);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}