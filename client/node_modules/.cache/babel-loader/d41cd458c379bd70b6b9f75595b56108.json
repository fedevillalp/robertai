{"ast":null,"code":"var createWordMapData = function createWordMapData(wordListandNumbers, wordsSorted) {\n  //this function formats the most repeated words\n  //in data format ready to plot\n  var data = [];\n\n  for (var i = 0; i < wordsSorted.length; i++) {\n    if (wordsSorted[i] != \"\") {\n      data.push({\n        name: wordsSorted[i],\n        repeated: wordListandNumbers[wordsSorted[i]]\n      });\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  wordMap: function wordMap(text) {\n    //This function received a text string and returns \n    // one object of word:times_repeated pairs for all words\n    // and one vector in the order ot repetition from high to low\n    var textArray = text.split(\" \");\n    var wordContainer = [];\n    var keysSorted = null;\n\n    for (var i = 0; i < textArray.length; i++) {\n      wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0) + 1; //use key value pairs \n    }\n\n    keysSorted = Object.keys(wordContainer).sort(function (a, b) {\n      return wordContainer[b] - wordContainer[a];\n    });\n    var data = createWordMapData(wordContainer, keysSorted);\n    return data;\n  }\n};","map":{"version":3,"sources":["/Users/federico/Library/Mobile Documents/com~apple~CloudDocs/Personal Federico [iCloud]/Projectos/Transcriber/client/src/Algorithms/wordmap.js"],"names":["createWordMapData","wordListandNumbers","wordsSorted","data","i","length","push","name","repeated","module","exports","wordMap","text","textArray","split","wordContainer","keysSorted","Object","keys","sort","a","b"],"mappings":"AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,kBAAV,EAA6BC,WAA7B,EAA0C;AAChE;AACA;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,QAAGF,WAAW,CAACE,CAAD,CAAX,IAAgB,EAAnB,EAAsB;AACtBD,MAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,QAAAA,IAAI,EAAEL,WAAW,CAACE,CAAD,CADX;AACgBI,QAAAA,QAAQ,EAAEP,kBAAkB,CAACC,WAAW,CAACE,CAAD,CAAZ;AAD5C,OAAV;AAGC;AACJ;;AAED,SAAOD,IAAP;AAEH,CAfD;;AAiBAM,MAAM,CAACC,OAAP,GAAiB;AAEbC,EAAAA,OAAO,EAAE,iBAAUC,IAAV,EAAgB;AACrB;AACA;AACA;AAEA,QAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAhB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,SAAI,IAAIZ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACS,SAAS,CAACR,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AACpCW,MAAAA,aAAa,CAACF,SAAS,CAACT,CAAD,CAAV,CAAb,GAA8B,CAACW,aAAa,CAACF,SAAS,CAACT,CAAD,CAAV,CAAb,IAA+B,CAAhC,IAAsC,CAApE,CADoC,CACmC;AACtE;;AAEDY,IAAAA,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,IAA3B,CAAgC,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAC,aAAON,aAAa,CAACM,CAAD,CAAb,GAAiBN,aAAa,CAACK,CAAD,CAArC;AAAyC,KAAvF,CAAb;AAEA,QAAIjB,IAAI,GAAGH,iBAAiB,CAACe,aAAD,EAAeC,UAAf,CAA5B;AACA,WAAOb,IAAP;AACH;AAnBY,CAAjB","sourcesContent":["const createWordMapData = function (wordListandNumbers,wordsSorted) {\n    //this function formats the most repeated words\n    //in data format ready to plot\n    let data = [];\n\n    for (let i = 0; i < wordsSorted.length; i++) {\n        if(wordsSorted[i]!=\"\"){\n        data.push({\n            name: wordsSorted[i], repeated: wordListandNumbers[wordsSorted[i]]\n        })\n        }\n    }\n    \n    return data;\n    \n}\n\nmodule.exports = {\n\n    wordMap: function (text) {\n        //This function received a text string and returns \n        // one object of word:times_repeated pairs for all words\n        // and one vector in the order ot repetition from high to low\n        \n        let textArray = text.split(\" \");\n        let wordContainer = [];\n        let keysSorted = null;\n        \n        for(let i=0; i<textArray.length;i++){\n        wordContainer[textArray[i]] = (wordContainer[textArray[i]] || 0 ) + 1; //use key value pairs \n        }\n        \n        keysSorted = Object.keys(wordContainer).sort(function(a,b){return wordContainer[b]-wordContainer[a]});\n        \n        let data = createWordMapData(wordContainer,keysSorted);\n        return data;\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}