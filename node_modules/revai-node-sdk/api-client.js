"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const FormData = require("form-data");
const fs = require("fs");
const RevAiApiError_1 = require("./models/RevAiApiError");
class RevAiApiClient {
    constructor(accessToken, version = 'v1') {
        this.accessToken = accessToken;
        axios_1.default.defaults.baseURL = `https://api.rev.ai/revspeech/${version}/`;
        /* tslint:disable:no-string-literal */
        axios_1.default.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
        axios_1.default.defaults.headers['User-Agent'] = `RevAi-NodeSDK/1.1.0`;
        /* tslint:enable:no-string-literal */
    }
    getAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.get('/account');
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 401:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    getJobDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.get(`/jobs/${id}`);
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 401:
                    case 404:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    getListOfJobs(limit, startingAfter) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let params = [];
                if (limit) {
                    params.push(`limit=${limit}`);
                }
                if (startingAfter) {
                    params.push(`starting_after=${startingAfter}`);
                }
                const query = `?${params.join('&')}`;
                const response = yield axios_1.default.get(`/jobs${params.length > 0 ? query : ''}`);
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 400:
                        throw new RevAiApiError_1.InvalidParameterError(error);
                    case 401:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    deleteJob(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield axios_1.default.delete(`/jobs/${id}`);
            }
            catch (error) {
                switch (error.response.status) {
                    case 401:
                    case 404:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    case 409:
                        throw new RevAiApiError_1.InvalidStateError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    submitJobUrl(mediaUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options) {
                options.media_url = mediaUrl;
            }
            else {
                options = { 'media_url': mediaUrl };
            }
            try {
                const response = yield axios_1.default.post('/jobs', options, {
                    headers: { 'Content-Type': 'application/json' }
                });
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 400:
                        throw new RevAiApiError_1.InvalidParameterError(error);
                    case 401:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    case 403:
                        throw new RevAiApiError_1.InsufficientCreditsError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    submitJobLocalFile(filename, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let payload = new FormData();
            payload.append('media', fs.createReadStream(filename));
            if (options) {
                payload.append('options', JSON.stringify(options));
            }
            try {
                const response = yield axios_1.default.post('/jobs', payload, {
                    headers: payload.getHeaders()
                });
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 400:
                        throw new RevAiApiError_1.InvalidParameterError(error);
                    case 401:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    case 403:
                        throw new RevAiApiError_1.InsufficientCreditsError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    getTranscriptObject(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.get(`/jobs/${id}/transcript`, {
                    headers: { 'Accept': 'application/vnd.rev.transcript.v1.0+json' }
                });
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 401:
                    case 404:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    case 409:
                        throw new RevAiApiError_1.InvalidStateError(error);
                    default:
                        throw error;
                }
            }
        });
    }
    getTranscriptText(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.get(`/jobs/${id}/transcript`, {
                    headers: { 'Accept': 'text/plain' }
                });
                return response.data;
            }
            catch (error) {
                switch (error.response.status) {
                    case 401:
                    case 404:
                        throw new RevAiApiError_1.RevAiApiError(error);
                    case 409:
                        throw new RevAiApiError_1.InvalidStateError(error);
                    default:
                        throw error;
                }
            }
        });
    }
}
exports.RevAiApiClient = RevAiApiClient;
//# sourceMappingURL=api-client.js.map